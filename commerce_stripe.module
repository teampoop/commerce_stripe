<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_stripe_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_stripe'] = array(
    'base' => 'commerce_stripe',
    'title' => t('Stripe (Credit Card)'),
    'short_title' => t('Credit card'),
    'display_title' => t('Pay now with a credit card'),
    'description' => t('Integrates with the Stripe payment service.'),
  );
  return $payment_methods;
}

function commerce_stripe_settings_form($settings = NULL) {
  $form = array();
  
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'commerce_stripe_env' => 'test',
    'test' => array( 'secret' => '', 'public' => '', ),
    'live' => array( 'secret' => '', 'public' => '', ),
  );
    
  $output = '<ol>';
  $output .= '<li>' . t('Get your API keys from your <a href="@url">Stripe account page</a>.', array('@url' => 'https://manage.stripe.com/account')) . '</li>';
  $output .= '<li>' . t('Select the environment to choose the proper API Key. (Defaults to "Test")') . '</li>';
  $output .= '</ol>';
  
  $form['info'] = array(
    '#markup' => $output,
  );
  $form['commerce_stripe_env'] = array(
    '#type' => 'radios',
    '#title' => t('Stripe API Environment'),
    '#default_value' => $settings['commerce_stripe_env'],
    '#options' => array(
      'test' => t('Test'),
      'live' => t('Live')
    ),
    '#description' => t('This determines which set of keys you are using.'),
  );
  
  $form['test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test Keys'),
    '#collapsible' => FALSE,
  );
  
  $form['test']['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Test Secret Key'),
    '#size' => 50,
    '#default_value' => $settings['test']['secret'],
  );
  
  $form['test']['public'] = array(
    '#type' => 'textfield',
    '#title' => t('Test Publishable Key'),
    '#size' => 50,
    '#default_value' => $settings['test']['public'],
  );
  
  $form['live'] = array(
    '#type' => 'fieldset',
    '#title' => t('Live Keys'),
    '#collapsible' => FALSE,
  );
  
  $form['live']['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Live Secret'),
    '#size' => 50,
    '#default_value' => $settings['live']['secret'],
  );
  
  $form['live']['public'] = array(
    '#type' => 'textfield',
    '#title' => t('Live Publishable'),
    '#size' => 50,
    '#default_value' => $settings['live']['public'],
  );


  return $form;
}

function commerce_stripe_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $form = commerce_payment_credit_card_form(array('number' => '', 'exp_month' => '', 'exp_year' => '', 'code' => ''));

  // Load external libraries.
  $form['#attached']['js'] = array(
    'https://js.stripe.com/v1/',
    drupal_get_path('module', 'commerce_stripe') . '/commerce_stripe.js',
  );
  
  $form['stripe_token'] = array(
    '#type' => 'hidden',
    '#attributes' => array('id' => 'commerce-stripe-token'),
  );

  // And set our key.
  $form['set_stripe_key'] = array(
    '#type' => 'markup',
    '#markup' => '<script>jQuery(document).ready(function () { Stripe.setPublishableKey("' . _commerce_stripe_get_key('public', $payment_method['settings']) . '"); });</script>',
  );

  // To display validation errors.
  $form['errors'] = array(
    '#type' => 'markup',
    '#markup' => "<div id='commerce-stripe-payment-errors'></div>",
  );

  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_stripe_submit_form_validate($payment_method, $pane_form, $pane_values, $order) {
  // Takes token and then submits the amount.
  // Require needed Stripe library.
  require_once drupal_get_path('module', 'commerce_stripe') . '/lib/Stripe.php';

  // Set stripe secret key.
  Stripe::setApiKey(_commerce_stripe_get_key('secret', $payment_method['settings']));

  // Assemble charge parameters. Only 'usd' is supported.
  $c = array(
    'amount' => $order->commerce_order_total[LANGUAGE_NONE][0]['amount'],
    'currency' => 'usd',
    'card' => $pane_values['stripe_token'],
    'description' => 'Order Number: ' . $order->order_number,
  );
  
  try{
    $response = Stripe_Charge::create($c);
    
    if (!$response->paid) {
      drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
      drupal_set_message(check_plain($response->card), 'error');
      watchdog('commerce_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => check_plain($response->card)), WATCHDOG_NOTICE);
      return FALSE;    
    }
    $payment_method['response'] = $response;
    
  } catch (Exception $e) {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain($e->getMessage()), 'error');
    watchdog('commerce_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => check_plain($e->getMessage())), WATCHDOG_NOTICE);
    return FALSE;
  }
}

function commerce_stripe_form_submit($payment_method, $pane_form, $pane_values, $order) {

  $response = $payment_method['response'];
  
  // Prepare a transaction object to represent the transaction attempt.
  $transaction = commerce_payment_transaction_new('commerce_stripe', $order->order_id);

  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response->id;
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;
  $transaction->message = "Payment completed successfully.";
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
}

function _commerce_stripe_get_key($key = 'public', $payment_method) {
  $env = $payment_method['commerce_stripe_env'];
  $key = $payment_method[$env][$key];
  return $key;
}